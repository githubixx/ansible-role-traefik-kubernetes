# All possible Helm chart values here can be found at:
# https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml

# These arguments are passed to Traefik's binary. For all options see:
# https://doc.traefik.io/traefik/reference/static-configuration/cli/
#
# First one sets log level accordingly.
#
# Second one sets value of "kubernetes.io/ingress.class"
# annotation to watch for. So if a "standard" Kubernetes "Ingress" object
# is submitted to Kubernetes API server  (instead of Traefik's own ingress
# implementation called "IngressRoute"), Traefik will handle these requests
# and route the them accordingly.
additionalArguments:
  - "--log.level=INFO"
  - "--providers.kubernetesingress.ingressclass=traefik"

# Global arguments passed to Traefik's binary.
# https://doc.traefik.io/traefik/reference/static-configuration/cli/
#
# First one disables periodical check if a new version has been released.
#
# Second one disables anonymous usage statistics. 
globalArguments:
  - "--global.checknewversion=false"
  - "--global.sendanonymoususage=false"

# This creates the Traefik deployment. As "DaemonSet" is specified here
# this will create a Traefik instance on all Kubernetes worker nodes. If
# only a subset of nodes should be used specify "affinity", "nodeSelector"
# or "tolerations" accordingly. See link to Helm chart values above.
deployment:
  enabled: true
  kind: DaemonSet
  dnsPolicy: ClusterFirstWithHostNet

# Runs Traefik in the host network namespace to make the proxy available
# from outside of the Kubernetes cluster.
hostNetwork: true

# Instructs Traefik to listen on various ports.
ports:
  # The name of this one can't be changed as it is used for the readiness
  # and liveness probes, but you can adjust its config to your liking.
  # Make sure that this port is protected by a Firewall or create a secure
  # ingress! To access the dashboard you can use "kubectl port-forward" e.g.:
  # kubectl -n traefik port-forward $(kubectl get pods --selector "app.kubernetes.io/name=traefik" --output=name -A | head -1) 9000:9000
  # Opening http://localhost:9000/dashboard/ should show the dashboard
  traefik:
    hostPort: 9000
    expose: false
    protocol: TCP
  # Unsecured incoming HTTP traffic. All traffic that arrives at this port
  # will be redirected to "websecure" entry point which means to the entry point
  # that handles secure HTTPS traffic.
  web:
    port: 80
    hostPort: 80
    protocol: TCP
    redirectTo: websecure
  # Entry point for HTTPS traffic.
  websecure:
    port: 443
    hostPort: 443
    protocol: TCP

# To allow Traefik listening on privileged port 80 and 443 (<1024) "runAsUser"
# needs to be "0". The provided "capabilities" limits the permissions of the
# Traefik container. The attack surface can further limited with "seccomp"
# with is stable since Kubernetes v1.19. See:
# https://kubernetes.io/docs/tutorials/clusters/seccomp/"
securityContext:
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE
  readOnlyRootFilesystem: true
  runAsGroup: 65532
  runAsNonRoot: false
  runAsUser: 0

# All processes of the container are also part of this supplementary group ID.
podSecurityContext:
  fsGroup: 65532

# Set log level of general log and enable access log.
logs:
  general:
    level: INFO
  access:
    enabled: true

# As Traefik will be deployed as DaemonSet and uses "hostNetwork" no service
# is needed.
service:
  enabled: false

